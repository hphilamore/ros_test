#! /usr/bin/env python
import rospy
from std_msgs.msg import String

import motor_package.PCA9685
#from tut_package.bye import PCA9685
from motor_package.PCA9685 import PCA9685

if __name__ == '__main__':
    motor_package.PCA9685.say('my friend!')


    Dir = [
    'forward',
    'backward',
    ]
    pwm = PCA9685(0x40, debug=False)
    pwm.setPWMFreq(50)

    class MotorDriver():
	    def __init__(self):
	        self.PWMA = 0
	        self.AIN1 = 1
	        self.AIN2 = 2
	        self.PWMB = 5
	        self.BIN1 = 3
	        self.BIN2 = 4

	    def MotorRun(self, motor, index, speed):
	        if speed > 100:
	            return
	        if(motor == 0):
	            pwm.setDutycycle(self.PWMA, speed)
	            if(index == Dir[0]):
	                pwm.setLevel(self.AIN1, 0)
	                pwm.setLevel(self.AIN2, 1)
	            else:
	                pwm.setLevel(self.AIN1, 1)
	                pwm.setLevel(self.AIN2, 0)
	        else:
	            pwm.setDutycycle(self.PWMB, speed)
	            if(index == Dir[0]):
	                pwm.setLevel(self.BIN1, 0)
	                pwm.setLevel(self.BIN2, 1)
	            else:
	                pwm.setLevel(self.BIN1, 1)
	                pwm.setLevel(self.BIN2, 0)

	    def MotorStop(self, motor):
	        if (motor == 0):
	            pwm.setDutycycle(self.PWMA, 0)
	        else:
	            pwm.setDutycycle(self.PWMB, 0)


	    def CommandCallback(self, commandMessage):
		    command = commandMessage.data
		    if command == 'forwards':
		        print('Moving forwards')
		        self.MotorRun(0, 'forward', 100)
    			self.MotorRun(1, 'backward', 100)
		        #Forwards()
		    # elif command == 'backwards':
		    #     print('Moving backwards')
		    #     Backwards()
		    # elif command == 'left':
		    #     print('Turning left')
		    #     Left()
		    # elif command == 'right':
		    #     print('Turning right')
		    #     Right()
		    elif command == 'stop':
		        print('Stopping')
		        # StopMotors()
                        self.MotorStop(0)
                        self.MotorStop(1)
		    else:
		        print('Unknown command, stopping instead')
		        self.MotorStop(0)
		        self.MotorStop(1)
		        #StopMotors()

	    def DistanceCallback(self, data):
			rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)

    # create a motor object
    Motor = MotorDriver()

    #Motor.MotorRun(0, 'forward', 100)
    #Motor.MotorRun(1, 'backward', 100)

    rospy.init_node('motors', anonymous=True)

    rospy.Subscriber('command', String, Motor.CommandCallback)
    rospy.Subscriber('distance_sense' , String, DistanceCallback)

    rospy.spin()
    print('Shutting down: stopping motors')
    Motor.MotorStop(0)
    Motor.MotorStop(1)
    #GPIO.cleanup()


    # control 2 motor
    #Motor.MotorRun(0, 'forward', 100)
    #Motor.MotorRun(1, 'backward', 100)
    #Motor.MotorStop(0)
    #Motor.MotorStop(1)
